-- Code generated by protokitgo. DO NOT EDIT.
-- source: netutils/packet.proto

local pb = require "pb"
local protoc = require "protoc"
local protoStr = [==[// ======================================
// ENGINE LEVEL PACKET. DO NOT EDIT.
// ======================================

syntax = "proto3";
package netutils;
option go_package = "bitbucket.org/funplus/sandwich/protocol/netutils";

option csharp_namespace = "gen.netutils";

enum PacketType {
  Common = 0;
  Ask = 1;
  AskResponse = 2;
  Tell = 3;
  TellAck = 4;
  Notify = 5;
  NotifyAckGhost = 6;
}

message RawPacket {
  int32 Version = 1;
  int32 SequenceID = 2;
  PacketType PacketType = 3;

  // metadata is a mapping from metadata key to value.
  repeated string metadata = 19;
  // default using queue mode, rawAny should be provided at least one
  repeated RawAny rawAny = 20;

  // reserved
  int32 ReservedInt1 = 30;
  int32 ReservedInt2 = 31;
  string ReservedStr1 = 32;
  string ReservedStr2 = 33;
  bytes ReservedBytes1 = 34;
  bytes ReservedBytes2 = 35;
}

message RawAny {
  //fullname of proto or user defined(need mapping to proto) for de/serialization
  string uri = 1;
  //bytes array for sub-proto message
  bytes raw = 2;
  // uuid of each request, 1: for debug trace, 2: as request number under http
  // server push and one way request will ignore passThrough
  string passThrough = 3;
}
]==]
assert(protoc:load(protoStr,"netutils/packet.proto"))

---@class RawPacket
---@field public metadataObj Metadata -- decode from metadata(repeated string)
---@field public Version number
---@field public SequenceID number
---@field public PacketType PacketType
---@field public metadata string[]
---@field public rawAny RawAny[]
---@field public ReservedInt1 number
---@field public ReservedInt2 number
---@field public ReservedStr1 string
---@field public ReservedStr2 string
---@field public ReservedBytes1 string
---@field public ReservedBytes2 string
local RawPacket={}
RawPacket.__index = RawPacket
---@return RawPacket
function RawPacket:new(data) return setmetatable(data or {},RawPacket)  end
---@return RawPacket
function RawPacket:newFromBytes(bytes) return setmetatable(pb.decode(self:getMessageName(),bytes) or {},RawPacket)  end
---@return string
function RawPacket:getMessageName() return "netutils.RawPacket" end
---@return string
function RawPacket:marshal()  return pb.encode(self:getMessageName(),self) end
netutils.RawPacket = RawPacket

---@class RawAny
---@field public message table -- decode from raw(bytes)
---@field public uri string
---@field public raw string
---@field public passThrough string
local RawAny={}
RawAny.__index = RawAny
---@return RawAny
function RawAny:new(data) return setmetatable(data or {},RawAny)  end
---@return RawAny
function RawAny:newFromBytes(bytes) return setmetatable(pb.decode(self:getMessageName(),bytes) or {},RawAny)  end
---@return string
function RawAny:getMessageName() return "netutils.RawAny" end
---@return string
function RawAny:marshal()  return pb.encode(self:getMessageName(),self) end
netutils.RawAny = RawAny
netutils.PacketType_Common = 0
netutils.PacketType_Ask = 1
netutils.PacketType_AskResponse = 2
netutils.PacketType_Tell = 3
netutils.PacketType_TellAck = 4
netutils.PacketType_Notify = 5
netutils.PacketType_NotifyAckGhost = 6

local PacketType_meta_name = {
    [0] = "Common",
    [1] = "Ask",
    [2] = "AskResponse",
    [3] = "Tell",
    [4] = "TellAck",
    [5] = "Notify",
    [6] = "NotifyAckGhost",
}

local PacketType_meta_value = {
    Common = 0,
    Ask = 1,
    AskResponse = 2,
    Tell = 3,
    TellAck = 4,
    Notify = 5,
    NotifyAckGhost = 6,
}

netutils.PacketTypeString = function(index) return PacketType_meta_name[index] end
netutils.PacketTypeNumber = function(name) return PacketType_meta_value[name] end

