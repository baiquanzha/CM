// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: netutils/packet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace gen.netutils {

  /// <summary>Holder for reflection information generated from netutils/packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for netutils/packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVuZXR1dGlscy9wYWNrZXQucHJvdG8SCG5ldHV0aWxzIuwBCglSYXdQYWNr",
            "ZXQSDwoHVmVyc2lvbhgBIAEoBRISCgpTZXF1ZW5jZUlEGAIgASgFEhAKCG1l",
            "dGFkYXRhGBMgAygJEiAKBnJhd0FueRgUIAMoCzIQLm5ldHV0aWxzLlJhd0Fu",
            "eRIUCgxSZXNlcnZlZEludDEYHiABKAUSFAoMUmVzZXJ2ZWRJbnQyGB8gASgF",
            "EhQKDFJlc2VydmVkU3RyMRggIAEoCRIUCgxSZXNlcnZlZFN0cjIYISABKAkS",
            "FgoOUmVzZXJ2ZWRCeXRlczEYIiABKAwSFgoOUmVzZXJ2ZWRCeXRlczIYIyAB",
            "KAwiNwoGUmF3QW55EgsKA3VyaRgBIAEoCRILCgNyYXcYAiABKAwSEwoLcGFz",
            "c1Rocm91Z2gYAyABKAlCQVowYml0YnVja2V0Lm9yZy9mdW5wbHVzL3NhbmR3",
            "aWNoL3Byb3RvY29sL25ldHV0aWxzqgIMZ2VuLm5ldHV0aWxzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::gen.netutils.RawPacket), global::gen.netutils.RawPacket.Parser, new[]{ "Version", "SequenceID", "Metadata", "RawAny", "ReservedInt1", "ReservedInt2", "ReservedStr1", "ReservedStr2", "ReservedBytes1", "ReservedBytes2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::gen.netutils.RawAny), global::gen.netutils.RawAny.Parser, new[]{ "Uri", "Raw", "PassThrough" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RawPacket : pb::IMessage<RawPacket> {
    private static readonly pb::MessageParser<RawPacket> _parser = new pb::MessageParser<RawPacket>(() => new RawPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::gen.netutils.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawPacket(RawPacket other) : this() {
      version_ = other.version_;
      sequenceID_ = other.sequenceID_;
      metadata_ = other.metadata_.Clone();
      rawAny_ = other.rawAny_.Clone();
      reservedInt1_ = other.reservedInt1_;
      reservedInt2_ = other.reservedInt2_;
      reservedStr1_ = other.reservedStr1_;
      reservedStr2_ = other.reservedStr2_;
      reservedBytes1_ = other.reservedBytes1_;
      reservedBytes2_ = other.reservedBytes2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawPacket Clone() {
      return new RawPacket(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "SequenceID" field.</summary>
    public const int SequenceIDFieldNumber = 2;
    private int sequenceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceID {
      get { return sequenceID_; }
      set {
        sequenceID_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_metadata_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> metadata_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// metadata is a mapping from metadata key to value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "rawAny" field.</summary>
    public const int RawAnyFieldNumber = 20;
    private static readonly pb::FieldCodec<global::gen.netutils.RawAny> _repeated_rawAny_codec
        = pb::FieldCodec.ForMessage(162, global::gen.netutils.RawAny.Parser);
    private readonly pbc::RepeatedField<global::gen.netutils.RawAny> rawAny_ = new pbc::RepeatedField<global::gen.netutils.RawAny>();
    /// <summary>
    /// default using queue mode, rawAny should be provided at least one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::gen.netutils.RawAny> RawAny {
      get { return rawAny_; }
    }

    /// <summary>Field number for the "ReservedInt1" field.</summary>
    public const int ReservedInt1FieldNumber = 30;
    private int reservedInt1_;
    /// <summary>
    /// reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReservedInt1 {
      get { return reservedInt1_; }
      set {
        reservedInt1_ = value;
      }
    }

    /// <summary>Field number for the "ReservedInt2" field.</summary>
    public const int ReservedInt2FieldNumber = 31;
    private int reservedInt2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReservedInt2 {
      get { return reservedInt2_; }
      set {
        reservedInt2_ = value;
      }
    }

    /// <summary>Field number for the "ReservedStr1" field.</summary>
    public const int ReservedStr1FieldNumber = 32;
    private string reservedStr1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReservedStr1 {
      get { return reservedStr1_; }
      set {
        reservedStr1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReservedStr2" field.</summary>
    public const int ReservedStr2FieldNumber = 33;
    private string reservedStr2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReservedStr2 {
      get { return reservedStr2_; }
      set {
        reservedStr2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReservedBytes1" field.</summary>
    public const int ReservedBytes1FieldNumber = 34;
    private pb::ByteString reservedBytes1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReservedBytes1 {
      get { return reservedBytes1_; }
      set {
        reservedBytes1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReservedBytes2" field.</summary>
    public const int ReservedBytes2FieldNumber = 35;
    private pb::ByteString reservedBytes2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReservedBytes2 {
      get { return reservedBytes2_; }
      set {
        reservedBytes2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (SequenceID != other.SequenceID) return false;
      if(!metadata_.Equals(other.metadata_)) return false;
      if(!rawAny_.Equals(other.rawAny_)) return false;
      if (ReservedInt1 != other.ReservedInt1) return false;
      if (ReservedInt2 != other.ReservedInt2) return false;
      if (ReservedStr1 != other.ReservedStr1) return false;
      if (ReservedStr2 != other.ReservedStr2) return false;
      if (ReservedBytes1 != other.ReservedBytes1) return false;
      if (ReservedBytes2 != other.ReservedBytes2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (SequenceID != 0) hash ^= SequenceID.GetHashCode();
      hash ^= metadata_.GetHashCode();
      hash ^= rawAny_.GetHashCode();
      if (ReservedInt1 != 0) hash ^= ReservedInt1.GetHashCode();
      if (ReservedInt2 != 0) hash ^= ReservedInt2.GetHashCode();
      if (ReservedStr1.Length != 0) hash ^= ReservedStr1.GetHashCode();
      if (ReservedStr2.Length != 0) hash ^= ReservedStr2.GetHashCode();
      if (ReservedBytes1.Length != 0) hash ^= ReservedBytes1.GetHashCode();
      if (ReservedBytes2.Length != 0) hash ^= ReservedBytes2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (SequenceID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceID);
      }
      metadata_.WriteTo(output, _repeated_metadata_codec);
      rawAny_.WriteTo(output, _repeated_rawAny_codec);
      if (ReservedInt1 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ReservedInt1);
      }
      if (ReservedInt2 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ReservedInt2);
      }
      if (ReservedStr1.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(ReservedStr1);
      }
      if (ReservedStr2.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(ReservedStr2);
      }
      if (ReservedBytes1.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteBytes(ReservedBytes1);
      }
      if (ReservedBytes2.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteBytes(ReservedBytes2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (SequenceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceID);
      }
      size += metadata_.CalculateSize(_repeated_metadata_codec);
      size += rawAny_.CalculateSize(_repeated_rawAny_codec);
      if (ReservedInt1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReservedInt1);
      }
      if (ReservedInt2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReservedInt2);
      }
      if (ReservedStr1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReservedStr1);
      }
      if (ReservedStr2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReservedStr2);
      }
      if (ReservedBytes1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ReservedBytes1);
      }
      if (ReservedBytes2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ReservedBytes2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawPacket other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.SequenceID != 0) {
        SequenceID = other.SequenceID;
      }
      metadata_.Add(other.metadata_);
      rawAny_.Add(other.rawAny_);
      if (other.ReservedInt1 != 0) {
        ReservedInt1 = other.ReservedInt1;
      }
      if (other.ReservedInt2 != 0) {
        ReservedInt2 = other.ReservedInt2;
      }
      if (other.ReservedStr1.Length != 0) {
        ReservedStr1 = other.ReservedStr1;
      }
      if (other.ReservedStr2.Length != 0) {
        ReservedStr2 = other.ReservedStr2;
      }
      if (other.ReservedBytes1.Length != 0) {
        ReservedBytes1 = other.ReservedBytes1;
      }
      if (other.ReservedBytes2.Length != 0) {
        ReservedBytes2 = other.ReservedBytes2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            SequenceID = input.ReadInt32();
            break;
          }
          case 154: {
            metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
            break;
          }
          case 162: {
            rawAny_.AddEntriesFrom(input, _repeated_rawAny_codec);
            break;
          }
          case 240: {
            ReservedInt1 = input.ReadInt32();
            break;
          }
          case 248: {
            ReservedInt2 = input.ReadInt32();
            break;
          }
          case 258: {
            ReservedStr1 = input.ReadString();
            break;
          }
          case 266: {
            ReservedStr2 = input.ReadString();
            break;
          }
          case 274: {
            ReservedBytes1 = input.ReadBytes();
            break;
          }
          case 282: {
            ReservedBytes2 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawAny : pb::IMessage<RawAny> {
    private static readonly pb::MessageParser<RawAny> _parser = new pb::MessageParser<RawAny>(() => new RawAny());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawAny> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::gen.netutils.PacketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawAny() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawAny(RawAny other) : this() {
      uri_ = other.uri_;
      raw_ = other.raw_;
      passThrough_ = other.passThrough_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawAny Clone() {
      return new RawAny(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    /// <summary>
    ///fullname of proto or user defined(need mapping to proto) for de/serialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "raw" field.</summary>
    public const int RawFieldNumber = 2;
    private pb::ByteString raw_ = pb::ByteString.Empty;
    /// <summary>
    ///bytes array for sub-proto message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Raw {
      get { return raw_; }
      set {
        raw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passThrough" field.</summary>
    public const int PassThroughFieldNumber = 3;
    private string passThrough_ = "";
    /// <summary>
    /// uuid of each request, 1: for debug trace, 2: as request number under http
    /// server push and one way request will ignore passThrough
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassThrough {
      get { return passThrough_; }
      set {
        passThrough_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawAny);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawAny other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (Raw != other.Raw) return false;
      if (PassThrough != other.PassThrough) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Raw.Length != 0) hash ^= Raw.GetHashCode();
      if (PassThrough.Length != 0) hash ^= PassThrough.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (Raw.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Raw);
      }
      if (PassThrough.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassThrough);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Raw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Raw);
      }
      if (PassThrough.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassThrough);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawAny other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Raw.Length != 0) {
        Raw = other.Raw;
      }
      if (other.PassThrough.Length != 0) {
        PassThrough = other.PassThrough;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            Raw = input.ReadBytes();
            break;
          }
          case 26: {
            PassThrough = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
